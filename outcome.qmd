---
title: "Team Assignment #3: Outcome - death or hosp from HF"
code-fold: true
editor_options: 
  chunk_output_type: console
---

```{r load-data}
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(kableExtra))
suppressPackageStartupMessages(library(survival))
suppressPackageStartupMessages(library(ggsurvfit))
suppressPackageStartupMessages(library(broom))
suppressPackageStartupMessages(library(broom.helpers))
suppressPackageStartupMessages(library(targets))
suppressPackageStartupMessages(library(gtsummary))
suppressPackageStartupMessages(library(rms))


tar_load(lista_zmiennych)
tar_load(zm_kategoryczne)
tar_load(df_trtmt)
tar_load(dd_df_trmnt)

options(datadist = "dd_df_trmnt")  # for the rms package

dwhf_surv <- with(df_trtmt, Surv(dwhfdays,dwhf))
```

# Założenia

Wśród osób zrandomizowanych w badaniu DIG do grupy leczonej digoksyną chcemy zidentyfikować określić, które cechy wiązały się z dobrą odpowiedzią na terapię digoksyną.

Dobrą odpowiedź na leczenie definiujemy jako

* przeżycie i brak hospitalizacji z powodu niewydolności serca 

# Implementacja

W zbiorze danych DIG jednym z punktów końcowych był "zgon lub hospitalizacja z powodu nwd. serca". Ten punkt końcowy reprezentowany jest przez następujące zmienne:  

```{r}
  lista_zmiennych %>%
    filter(
      var_names %in% c("dwhf", "dwhfdays")
    ) %>% 
    kable() %>%
    kable_classic_2()
```

# Model zerowy / Podstawowe statystyki 

```{r}
m0 <- survfit(dwhf_surv~1, data= df_trtmt)
```

## Liczba osób

```{r}
n_total <- nrow(df_trtmt)
n_total
```

## Sumaryczna liczba eventów

```{r}
n_events <- sum(df_trtmt$dwhf)
n_events
```


## Liczba obserwacji uciętych

```{r}
n_censored <- n_total - n_events
n_censored
```


## Czas obserwacji 

### Dni
```{r}
summary(df_trtmt$dwhfdays)
```

### Lata
```{r}
summary(df_trtmt$dwhfdays / 365.25)
```

## Skumulowana częstość występowania zdarzenia

```{r}
m0 %>%
  ggsurvfit() +
  add_confidence_interval() +
  add_risktable() +
  labs(
    title = "Cumulative Incidence Curve",
    x = "Time (days)",  # adjust if needed
    y = "Cumulative event probability"
  ) +
  scale_y_reverse(trans = "reverse")  # flip survival to mortality
```


## Mediana przeżycia

```{r}
summary(m0)$table["median"]
```

## 1-roczne przeżycia (event-free survival)

```{r}
summary(m0, times = 365.25)
```

# Jednoczynnikowa ocena kandydatów na predyktorów

Z dostępnego zbioru danych wybrałem następujące zmienne jako potencjalnych kandydatów 

```{r}
candidate_vars <- c("age", "sex", "race", "ejf_per", "chestx", "bmi", "creat", "klevel", "chfdur", "nsym", 
          "heartrte", "diabp", "sysbp",  "meanbp", "nyha_class", "chfetiol", "prevmi", "angina",
          "diabetes", "hyperten", "diguse", "diuretk", "diuret", "ksupp", "aceinhib",
          "nitrates", "hydral", "vasod", "any_diuret", "any_vasod", "ejf_35", "chestx_55")

lista_zmiennych %>% 
  semi_join( 
    tibble(
      var_names = candidate_vars), by = join_by(var_names)
    ) %>% 
  kable() %>% 
  kable_classic_2() 
```

## Wykresy K-M dla zmiennych-kandydatów kategorycznych

```{r}
dwhf_km_1v <- function(var_name) {
  # Extract label attribute (if present)
  var_label <- attr(df_trtmt[[var_name]], "label")
  
  # Fallback if label is missing
  if (is.null(var_label)) {
    var_label <- var_name
  }
  
  formula <- as.formula(paste("dwhf_surv ~", var_name))
  model <-  survfit(formula, data = df_trtmt)
  
  model %>%
    ggsurvfit() +
    labs(
        title = paste0("Kaplan-Meier Curve by ", var_name, " (", var_label, ")"),
        x = "Time (days)",
        y = "Survival probability"
      ) +
      theme_classic()
}
```


```{r}
vars_to_plot <- intersect(candidate_vars, zm_kategoryczne)

for (var in vars_to_plot) {
  print(dwhf_km_1v(var))
}
```

## Wykresy jednoczynnikowych m. Coxa dla zmiennych ciągłych

```{r}

dwhf_cox_1v_plot <- function(var_name) {
  
  # Use the label if available
  var_label <- attr(df_trtmt[[var_name]], "label")
  if (is.null(var_label)) var_label <- var_name 
  
  formula <- as.formula(paste0("dwhf_surv ~ rcs(", var_name, ", 4)"))
  model <- cph(formula, data = df_trtmt, x = TRUE, y = TRUE, surv = TRUE)

    pred <- eval(substitute(Predict(model, v, fun = exp), list(v = as.name(var_name))))
    
      plot(pred,
       xlab = var_label,
       ylab = "Hazard Ratio",
       main = paste0("Univariate HR Curve for ", var_name, " (", var_label, ")"))

}
```

```{r}
vars_to_plot <- setdiff(candidate_vars, zm_kategoryczne)

for (var in vars_to_plot) {
  print(dwhf_cox_1v_plot(var))
}
```


## Wyniki jednoczynnikowych regresji m. Coxa

W tabeli wyniki regresji jednoczynnikowych m. Coxa dla zdarzenia `dwhf` oraz 
wybranych zmiennych - kandydatów na predyktorów.  

```{r}
dwhf_cox_1v <- function(var_name) {
  
  formula <- as.formula(paste("dwhf_surv ~", var_name))
  model <- coxph(formula, data = df_trtmt)
  res <- broom::tidy(model, conf.int = TRUE)
  
  # Add var_name as a column — even if multiple levels
  res$var_names <- var_name
  
  # Optional: remove the intercept row if it's ever present
  res <- res[res$term != "(Intercept)", ]
  
  data.frame(
    var_names = var_name,
    level = res$term,
    hr = round(res$estimate, 3),
    hr_ci_lo = round(res$conf.low, 3),
    hr_ci_up = round(res$conf.high, 3),
    p_value = signif(res$p.value, 3)
  )
}

results <- do.call(rbind, lapply(candidate_vars, dwhf_cox_1v)) %>%
  left_join(lista_zmiennych, by='var_names') %>% 
  select(var_names, var_labels, level, everything())

results %>% kable(digits=3) %>% kable_classic_2()
```


# Model wieloczynnikowy, po selekcji kandydatów

```{r}
m1 <- cph(dwhf_surv ~ age + sex + race + scale(ejf_per, scale=F) * scale(chestx, scale=F)  +  bmi + functcls +
            diguse + diuret + aceinhib + prevmi + diabetes + hyperten,
          data = df_trtmt, x = TRUE, y = TRUE, surv = TRUE)

concordance(m1)
AIC(m1)
BIC(m1)

m1 %>% 
  tbl_regression(
    exponentiate = TRUE, 
    tidy_fun = broom.helpers::tidy_parameters, 
    intercept=TRUE, 
    label = list(
      `sex=2` ~ 'Sex = F',
      `race=2` ~ 'Race = nonwhite',
      `ejf_per[1]` ~ 'ejection fraction (percent)',
      `chestx[1]` ~ 'chest x-ray (ct-ratio)',
      `functcls=2` ~ 'NYHA II',
      `functcls=3` ~ 'NYHA III',
      `functcls=4` ~ 'NYHA IV',
      `diguse=1` ~ 'digoxin within past week',
      `diuret=1` ~ 'diuretics (non-K-sparing)',
      `aceinhib=1` ~ 'ace inhibitors',
      `prevmi=1` ~ 'previous myocardial infarction',
      `diabetes=1` ~ 'history of diabetes',
      `hyperten=1` ~ 'history of hypertension',
      `ejf_per[1] * chestx[1]` ~ 'interaction term: EF * x-ray (ct-ratio)'
    )
  )
```


# Interpretacja

Przypomnienie naszej definicji dobrej odpowiedzi -- brak zgonu oraz hospitalizacji z powodu zaostrzenia niewydolności serca .

W powyższym modelu wieloczynnikowym z występowaniem dobrej odpowiedzi na terapię digoksyną związane były następujące czynniki:

- rasa biała 
- wyższa frakcja wyrzutowa
- niższy wskaźnik sercowo-płucny w rtg
- niższa klasa czynnościowa wg nyha
- niestosowanie digoksyny w tygodniu poprzedzającym randomizaję
- niestosowanie diuretyków

Na występowanie dobrej odpowiedzi nie wpływały czynniki takie jak: wiek, płeć, BMI, stosowanie ACE-I, przebyty zawał, cukrzyca w wywiadzie, nadciśnienie w wywiadzie.

Porównanie szacowanego przez model ryzyka zgonu/hospit.HF dla przykładowych osób z profilem związanym z niskim ryzykiem vs z wysokim ryzykiem. Definicja profilów w poniższej tabelce. Pod tabelką wykres.
 
```{r}
low_risk <- data.frame(
  age = 50,
  sex = 1,
  race = 1,
  ejf_per = 50, 
  chestx = 0.4, 
  bmi = 24,
  functcls = 2,
  diguse = 0,
  diuret = 0,
  aceinhib = 1,
  prevmi = 0,
  diabetes = 1,
  hyperten = 0
)

high_risk <- data.frame(
  age = 50,
  sex = 1,
  race = 1,
  ejf_per = 30, 
  chestx = 0.65, 
  bmi = 24,
  functcls = 4,
  diguse = 1,
  diuret = 1,
  aceinhib = 1,
  prevmi = 0,
  diabetes = 1,
  hyperten = 0
)
 

bind_rows(
    list(`low risk profile` = low_risk, `high risk profile` = high_risk), .id='id') %>%
t() %>%
as_tibble(  rownames="characteristic", .name_repair = "unique") %>%
kable() %>%
kable_classic_2()
```

```{r}
df_low <- tidy(survfit(m1, newdata = low_risk)) %>% mutate(group = "Low risk")
df_high <- tidy(survfit(m1, newdata = high_risk)) %>% mutate(group = "High risk")
df_combined <- bind_rows(df_low, df_high)

ggplot(df_combined, aes(x = time, y = estimate, color = group)) +
  geom_step() +
  labs(title = "Survival curves for low-risk and high-risk profile",
       y = "Survival probability",
       x = "Time (days)",
       color = "Risk Profile") +
  theme_minimal()
```

